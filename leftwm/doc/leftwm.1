.\" Process this file with
.\" File taken from BSD mandoc template.
.\"
.TH leftwm 1 Gnu/Linux "User Manuals"
.SH NAME
LeftWM \- A tiling window manager for adventurers. For more comprehensive documentation of leftwm please see: https://github.com/leftwm/leftwm/wiki
.SH SYNOPSIS
.B leftwm [SUBCOMMAND]
.SH DESCRIPTION
.B leftwm
starts the left window manager on $DISPLAY, this will depend on your session manager, though it is recommended to start leftwm using
.B "exec-dbus-launch leftwm".
This command also launches leftwm-worker and logs for errors to the console.
The list of available subcommands available for leftwm is listed below:
.SH SUBCOMMANDS
.IP "-h, --help"
Prints help information for this subcommand. This flag can also be used with other subcommands to display their own help message.
.IP "-v, --version"
Prints the version information.
.IP "-b, --backend"
Specify the backend to use when starting LeftWM.
Available backends depends on which feature flag was enables at compile time.
You can check which backends are available on your LeftWM installation by using 'leftwm help backend'
.IP
Currently implemented backends: "xlib" (default), "x11rb"
.IP "check"
This command will run several actions to ensure leftwm is configured properly, this will report the current leftwm version and git commit, it will also check if configuration is loaded correctly, check for syntax errors in your
.I config.toml
file, check your environment and theme files for errors as well.
.B "NOTE:"
This subcommand will check for basic / common mistakes made in the directory structure or permissions, however it will not check or report if any mistakes were made in any extra scripts, bar configurations, liquid templates and anything that isn't the up or down executables.
.IP "command"
This subcommand sends commands directly to leftwm. It can also be used to concat commands for a keybind in
.I config.toml
For a list of available commands use the '-l, --list' flag.
.IP "state"
Prints the current state of leftwm (in JSON format). You can also use flags and liqud-like syntax for a more refined output of this command.
.IP "theme"
Manage leftwm themes (This is part of an external package found in: https://GitHub.com/leftwm/leftwm-theme).
.IP "config"
Manage leftwm configuration (This is part of an external package found in: https://GitHub.com/leftwm/leftwm-config).
.SH CONFIGURING LEFTWM

.B NOTE:
We are in the transition from
.I TOML
to
.I RON
as config language. Please use leftwm-check with '-m, --migrate-ron-to-toml' flags to convert your config.
For more info please refer to the wiki.
.IP "Configuration file"
The settings file of leftwm can be found at:
.I $HOME/.config/leftwm/config.ron
.IP
With this file you can configure the modkey for leftwm, available keybinds, tag names, workspace layouts and more.
.RS
NOTE: This file is automatically generated when leftwm or leftwm-check is run for the first time.
.SS Default keybinds
.IP "Movement"
 up, down, left or right refer to the arrow keys in your keyboard.
.TS
tab(;);
l l.
Keybinding;Description
_
Mod + (1-9) ; Switch to a desktop/tag
Mod + Shift + (1-9) ; Move the focused window to desktop/tag
Mod + W ; Switch the desktops for each screen. Desktops [1][2] changes to [2][1]
Mod + Shift + W ; Move window to the other desktop
Mod + (up or down) ; Focus on the different windows in the current workspace
Mod + Shift + (up or down) ; Move the different windows in the current workspace
Mod + Enter ; Move selected window to the top of the stack in the current workspace
Mod + Ctrl + (up or down) ; Switch between different layouts
Mod + Shift + (left or right) ; Switch between different workspaces
Mod + Shift + Enter ; Open a terminal
Mod + Ctrl + L ; Lock the screen
Mod + Shift + X ; Exit LeftWM
Mod + Shift + Q ; Close the current window
Mod + Shift + R ; Reload LeftWM and its config
Mod + p ; Use dmenu to start application
.TE
.PP
.B Note:
Although we encourage you to use Alacritty, LeftWM will set your default terminal to the first terminal it finds in this list (in the order presented):
.IP \[bu] 2
Alacritty
.IP \[bu] 2
Termite
.IP \[bu] 2
Kitty
.IP \[bu] 2
URXVT
.IP \[bu] 2
RXVT
.IP \[bu] 2
ST
.IP \[bu] 2
ROXTerm
.IP \[bu] 2
Eterm
.IP \[bu] 2
XTerm
.IP \[bu] 2
Terminator
.IP \[bu] 2
Terminology
.IP \[bu] 2
Gnome Terminal
.IP \[bu] 2
XFCE4 Terminal
.IP \[bu] 2
Konsole
.IP \[bu] 2
UXTerm
.IP \[bu] 2
Guake

.IP "About Keybind Modifiers"
Note: All entries require a modifier, even if blank: modifier: []
see your
.I
config.ron
file for more information.

.SS Floating Windows
.PP
You can optionally switch between tiling or floating mode for any
window.
.PP
.TS
tab(;);
l l.

Keybinding;Description
_
Mod + MouseDrag ; Switch a tiled window to floating mode
Mod + RightMouseDrag ; Resize a window
Drag window to a workspace edge ; Switch a floating window to tiling mode
.TE
.SS FloatingToTile
This behaviour snaps the currenly focused window into the workspace below.
.SS TileToFloating
This behaviour switches the currently focused window to floating mode when it's tiled.
.SS ToggleFloating
This behaviour switches the currenly focused window between floating and tiled mode.

.\" Configuration section\"
.SH CONFIGURATION
.B IMPORTANT:
You will need to reload in order to apply any changes you write to
.I config.ron

.B NOTE:
We are in the transition from
.I TOML
to
.I RON
as config language. Please use leftwm-check with '-m, --migrate-ron-to-toml' flags to convert your config.
For more info please refer to the wiki.

.SS Modkey
.PP
The modkey is the most important setting.
It is used by many other settings and controls how key bindings work:
.PP
Default: \f[C]modkey = \[dq]Mod4\[dq]\f[R] (windows key)
.SS Mousekey
.PP
The mousekey is similarly quite important.
This value can be used to determine which key, when held, can assist a
mouse drag in resizing or moving a floating window or making a window
float or tile.
.PP
Default: \f[C]mousekey = \[dq]Mod4\[dq]\f[R] (windows key)
.SS Focus Behaviour
.PP
LeftWM has 3 focusing behaviours (Sloppy, ClickTo, and Driven) and
2 options (focus_new_windows, sloppy_mouse_follows_focus), which alter the way focus is handled.
These encompass 5 different patterns:
.IP "1." 3
Sloppy Focus.
Focus follows the mouse, hovering over a window brings it to focus.
This behaviour have a variant which is toggled with the sloppy_mouse_follows_focus option:
.IP "-" 4
When true, the cursor will follow the focus and teleport to the window that takes focus.
.IP "-" 4
When false, the cursor isn't moved by LeftWM at all.
.IP "2." 3
Click-to-Focus.
Focus follows the mouse, but only clicks change focus.
.IP "3." 3
Driven Focus.
Focus disregards the mouse, only keyboard actions drive the focus.
.PP
Default:
.IP
.nf
\f[C]
focus_behaviour = \[dq]Sloppy\[dq] # Can be Sloppy, ClickTo, or Driven
focus_new_windows = true
sloppy_mouse_follows_focus = true # Only active with the Sloppy behaviour
\f[R]
.fi
.SS Cursor Behaviour on Resize
.PP
LeftWM automatically snaps the mouse to the lower right hand corner
when a window is being resized. This behaviour is controlled by the
disable_cursor_reposition_on_resize setting. When true, the
cursor will not be repositioned on resize start. When false or unspecified,
the cursor will be snapped to the lower right corner of the window which is
being resized.
.PP
Default: \f[C]disable_cursor_reposition_on_resize = false\f[R]
.SS Window Creation and Cursor Focus
.PP
In multi-workspace layouts (such as with multiple monitors), LeftWM
will, by default, create the new window on the workspace where the cursor
is currently located, even if that workspace is not the workspace which is focused.
In Click-to-Focus and Driven Focus modes, however, it is often desirable to create
the window in the focused workspace, not the one wherein the mouse is located. The
\f[C]create_follows_cursor\f[R] feature allows for changing this behavior.
New windows will be created in the workspace:
.IP "-"
.B  Containing the cursor
when unset (\f[C]None\f[R]), \f[C]Some(true)\f[R], or when the cursor is in \f[C]Sloppy\f[R] mode
.IP "-"
.B Which is focused
when set to \f[C]Some(false)\f[R]
.PP
Default: \f[C]create_follows_cursor = None\f[R]
.SS Layouts
.PP
Leftwm supports a variety of user definable layouts. Layouts define the way that windows are tiled in the workspace.
.PP
The layouts considered by leftwm can be customized in the
.B config.ron
file by editing the
.B layouts
and the
.B layout_definitions
entries.
.PP
The layouts in the
.B layouts
list are those accessible when switching layouts. For an example with a single layout:
.PP
.IP
.nf
\f[C]
layouts = [ "MyMainAndVertStack" ]
\f[R]
.fi
.PP
Each list in the
.B layouts
list must have a corresponding definition in the
.B layout_definitions
entry. For example:
.PP
.IP
.nf
\f[C]
layout_definitions = [(
  name: "MyMainAndVertStack",
  flip: None,
  rotate: North,
  reserve: ReserveAndCenter,
  columns: (
    flip: None,
    rotate: North,
    main: (count: 1, size: 0.8, flip: None, rotate: North, split: None),
    stack: (flip: None, rotate: North, split: Horizontal),
    second_stack: None,
  ),
)]
\f[R]
.fi
.PP
The size of the
.B main
area can be controlled with the
.B IncreaseMainSize
and
.B DecreaseMainSize
commands.

.PP
There are various possiblities for the other parameters, and the user is referred to the default configuration file to see a large selection of examples.


.SS Workspaces
.PP
Workspaces are how you view tags (desktops).
A workspace is an area on a screen or most likely the whole screen.
in this areas you can view a given tag.
.PP
Default: \f[C]workspaces: []\f[R] (one workspace per screen)
.PP
Example (two workspaces on a single ultrawide):
.IP
.nf
\f[C]
workspaces: [
    ( y: 0, x: 0, height: 1440, width: 1720 ),
    ( y: 0, x: 1720, height: 1440, width: 1720 ),
]
\f[R]
.fi
.PP
Workspaces can also be applied to a specific screen by using the output field. If this field is used, all size-related fields get relative to the output's position. You can set multiple workspaces per screen.
.PP
If you only set per-screen workspaces, unassigned screens will be automatically given a workspace.
.PP
You can get the output names by running xrandr in your terminal.
.PP
Again the example for an ultra-wide screen, splitting workspaces by substracting half the width:
.IP
.nf
\f[C]
workspaces: [
    ( output: "HDMI-1", y: 0, x: 0, height: 1440, width: -1720 ),
    ( output: "HDMI-1", y: 0, x: 1720, height: 1440, width: -1720 ),
]
\f[R]
.fi

.SS Tags
.PP
Tags are the names of the virtual desktops where windows live.
In other window managers these are sometimes just called desktops.
You can rename them to any unicode string including symbols/icons from
popular icon libraries such as font-awesome.
.PP
Default:
\f[C]tags: [\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq], \[dq]4\[dq], \[dq]5\[dq], \[dq]6\[dq], \[dq]7\[dq], \[dq]8\[dq], \[dq]9\[dq]]\f[R]

.SS Scratchpads
.PP 
A scratchpad is a set of windows which you can call to any tag and hide it when not needed. These windows can be any set of application which can be run from a terminal. To call a scratchpad you will require a keybind for ToggleScratchPad. When you want to manipulate the currently focused scratchpad, other commands like ReleaseScratchPad, AttachScratchPad and NextScratchPadWindow/PrevScratchPadWindow are available.
.PP 
Example:
.IP
.nf
\f[C]
scratchpad: [
    ( name: "Alacritty", // This is the name which is referenced when calling (case-sensitive)
      value: "alacritty", // The command to load the application if it isn't started (first application to start)
      args: ["-e", "python"], // Any arguments to pass to the command
      // x, y, width, height are in pixels when an integer is inputted or a percentage when a float is inputted.
      // These values are relative to the size of the workspace, and will be restricted depending on the workspace size.
      x: 860, y: 390, height: 300, width: 200 
    ),
]
\f[R]
.fi



.SH WIKI
You can find more documentation in the LefrWM Wiki: https://github.com/leftwm/leftwm/wiki
.SH BUGS
If you find any bugs or functionality issues please report them on Github: https://github.com/leftwm/leftwm/issues
.SH AUTHORS
The LeftWM Development Team.
.SH COPYRIGHT
2021 - LeftWM
