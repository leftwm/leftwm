.\"t
.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "leftwm" "1" "" "version git" "leftwm manual page"
.hy
.SH leftwm(1) Manual Page
.SS NAME
.PP
LeftWM - A tiling window manager for Adventurers.
.PP
For comprehensive documentation of leftwm please see:
https://github.com/leftwm/leftwm/wiki
.SS SYNOPSIS
.PP
\f[B]leftwm\f[R] [SUBCOMMAND \&...]
.SS Description
.PP
Starts the left window manager on $DISPLAY.
This also boots \f[C]leftwm-worker\f[R] and logs for errors to the
console.
The list of available options for \f[C]leftwm\f[R] is listed below:
.PP
SUBCOMMAND can be:
.PP
\f[B]-h, \[en]help\f[R]: Prints help information.
.PP
\f[B]-v, \[en]version\f[R]: Prints version information.
.PP
\f[B]check\f[R]: Checks the syntax of the configuration file
.PP
\f[B]command\f[R]: Sends external commands to \f[C]leftwm\f[R]
.PP
\f[B]state\f[R]: Prints the current state of leftwm (in JSON format)
.PP
\f[B]theme\f[R]: Manage leftwm themes
.SH Configuring
.PP
The settings file to change key bindings and the default mod key can be
found at
.IP
.nf
\f[C]
$HOME/.config/leftwm/config.toml
\f[R]
.fi
.PP
the file is automatically generated when leftwm or leftwm-check is run
for the first time.
.SS Default keybinds
.PP
\f[B]up, down, left or right refer to the arrow keys in your
keyboard\f[R]
.PP
.TS
tab(@);
lw(22.8n) lw(47.2n).
T{
Keybinding
T}@T{
Description
T}
_
T{
Mod + (1-9)
T}@T{
Switch to a desktop/tag
T}
T{
Mod + Shift + (1-9)
T}@T{
Move the focused window to desktop/tag
T}
T{
Mod + W
T}@T{
Switch the desktops for each screen.
Desktops [1][2] changes to [2][1]
T}
T{
Mod + Shift + W
T}@T{
Move window to the other desktop
T}
T{
Mod + (up or down)
T}@T{
Focus on the different windows in the current workspace
T}
T{
Mod + Shift + (up or down)
T}@T{
Move the different windows in the current workspace
T}
T{
Mod + Enter
T}@T{
Move selected window to the top of the stack in the current workspace
T}
T{
Mod + Ctrl + (up or down)
T}@T{
Switch between different layouts
T}
T{
Mod + Shift + (left or right)
T}@T{
Switch between different workspaces
T}
T{
Mod + Shift + Enter
T}@T{
Open a terminal
T}
T{
Mod + Ctrl + L
T}@T{
Lock the screen
T}
T{
Mod + Shift + X
T}@T{
Exit LeftWM
T}
T{
Mod + Shift + Q
T}@T{
Close the current window
T}
T{
Mod + Shift + R
T}@T{
Reload LeftWM and its config
T}
T{
Mod + p
T}@T{
Use dmenu to start application
T}
.TE
.SS Floating Windows
.PP
You can optionally switch between tiling or floating mode for any
window.
.PP
.TS
tab(@);
l l.
T{
Keybinding
T}@T{
Description
T}
_
T{
Mod + MouseDrag
T}@T{
Switch a tiled window to floating mode
T}
T{
Mod + RightMouseDrag
T}@T{
Resize a window
T}
T{
Drag window onto a tile
T}@T{
Switch a floating window to tiling mode
T}
T{
Mod + Shift + (1-9)
T}@T{
Switch a floating window to tiling mode
T}
.TE
.SS 
.SS External Commands
.PP
This is a brief overview of the available external commands and their
possible arguments.
.PP
Generally you pass the string of the external command to
\f[C]$XDG_RUNTIME_DIR/leftwm/command.pipe\f[R].
For example from a shell you could use:
.IP
.nf
\f[C]
echo \[dq]SetLayout CenterMain\[dq] > $XDG_RUNTIME_DIR/leftwm/command.pipe
\f[R]
.fi
.PP
If you are on the leftwm 0.2.8 or above, external commands can be passed
in using leftwm-command.
Commands that contain arguments require quotes.
For example:
.IP
.nf
\f[C]
leftwm-command \[dq]SetLayout CenterMain\[dq]
\f[R]
.fi
.PP
Commands can also be chained together, for example:
.IP
.nf
\f[C]
leftwm-command \[dq]SendWindowToTag 2\[dq] \[dq]SendWorkspaceToTag 0 2\[dq]
\f[R]
.fi
.PP
.TS
tab(@);
lw(17.2n) lw(17.2n) lw(35.6n).
T{
Command
T}@T{
Arguments (if needed)
T}@T{
Notes
T}
_
T{
Reload
T}@T{
T}@T{
Reloads leftwm
T}
T{
LoadTheme
T}@T{
\f[C]Path-to/theme.toml\f[R]
T}@T{
usually used in themes \f[C]up\f[R] script to load a theme
T}
T{
UnloadTheme
T}@T{
T}@T{
usually used in themes \f[C]down\f[R] script to unload the theme
T}
T{
SetLayout
T}@T{
\f[C]LayoutName\f[R]
T}@T{
T}
T{
NextLayout
T}@T{
T}@T{
T}
T{
PreviousLayout
T}@T{
T}@T{
T}
T{
RotateTag
T}@T{
T}@T{
T}
T{
SetMarginMultiplier
T}@T{
\f[C]multiplier as float\f[R]
T}@T{
set a factor by which the margin gets multiplied, use \[lq]1.0\[rq] to
reset, negative values will be abs-converted
T}
T{
SwapScreen
T}@T{
T}@T{
swaps two screens/workspaces
T}
T{
SendWorkspaceToTag
T}@T{
\f[C]workspace index\f[R] \f[C]tag_index\f[R]
T}@T{
both indices as integer, focuses \f[C]Tag\f[R] on \f[C]Workspace\f[R]
T}
T{
SendWindowToTag
T}@T{
\f[C]tag_index\f[R]
T}@T{
index as integer, sends currently focused window to \f[C]Tag\f[R]
T}
T{
MoveWindowToLastWorkspace
T}@T{
T}@T{
moves currently focused window to last used workspace
T}
T{
MoveWindowToNextWorkspace
T}@T{
T}@T{
moves currently focused window to next workspace
T}
T{
MoveWindowToPreviousWorkspace
T}@T{
T}@T{
moves currently focused window to previous workspace
T}
T{
MoveWindowDown
T}@T{
T}@T{
moves currently focused window down once
T}
T{
MoveWindowUp
T}@T{
T}@T{
moves currently focused window up once
T}
T{
MoveWindowTop
T}@T{
T}@T{
moves currently focused window to the top
T}
T{
FloatingToTile
T}@T{
T}@T{
pushes currently focused floating window back to tiling mode
T}
T{
TileToFloating
T}@T{
T}@T{
Switch currently focused tiled window to floating mode
T}
T{
ToggleFloating
T}@T{
T}@T{
Switch currently focused window between tiled and floating mode
T}
T{
CloseWindow
T}@T{
T}@T{
closes currently focused window
T}
T{
FocusWindowDown
T}@T{
T}@T{
T}
T{
FocusWindowUp
T}@T{
T}@T{
T}
T{
FocusNextTag
T}@T{
T}@T{
T}
T{
FocusPreviousTag
T}@T{
T}@T{
T}
T{
FocusWorkspaceNext
T}@T{
T}@T{
T}
T{
FocusWorkspacePrevious
T}@T{
T}@T{
T}
T{
ToggleFullScreen
T}@T{
T}@T{
Makes currently focused window fullscreen/non-fullscreen
T}
.TE
.SS Configuration
.PP
All entries require a modifier, even if blank: \f[C]modifier = []\f[R]
.PP
\f[B]\f[BI]Important: You will need to reload (recommended SoftReload,
as it tries to preserve the WM state as far as possible) in order to
apply changes to \f[CBI]config.toml\f[BI].\f[B]\f[R]
.SS Terms
.IP \[bu] 2
\f[I]Default\f[R] refers to the original \f[C]config.toml\f[R] specified
when LeftWM first runs.
.IP \[bu] 2
\f[I]Partial Default\f[R] refers to a command that is in the original
\f[C]config.toml\f[R] but is not the only instance of that command.
.IP \[bu] 2
\f[I]Example\f[R] refers to a snippet that is not in the original
\f[C]config.toml\f[R] but can be added or modified for additional
features.
.SS Modkey
.PP
The modkey is the most important setting.
It is used by many other settings and controls how key bindings work.
For more info please read
this (https://stackoverflow.com/questions/19376338/xcb-keyboard-button-masks-meaning)
post on x11 Mod keys.
.PP
Default: \f[C]modkey = \[dq]Mod4\[dq]\f[R] (windows key)
.PP
Example: \f[C]modkey = \[dq]Mod1\[dq]\f[R]
.SS Mousekey
.PP
The mousekey is similarly quite important.
This value can be used to determine which key, when held, can assist a
mouse drag in resizing or moving a floating window or making a window
float or tile.
For more info please read
this (https://stackoverflow.com/questions/19376338/xcb-keyboard-button-masks-meaning)
post on x11 Mod keys.
.PP
Default: \f[C]mousekey = \[dq]Mod4\[dq]\f[R] (windows key)
.PP
Example: \f[C]mousekey = \[dq]Mod1\[dq]\f[R]
.SS Tag Behaviour
.PP
Starting with LeftWM 0.2.7, the behaviour of
SwapTags (https://github.com/leftwm/leftwm/wiki/Config#swaptags) was
changed such that if you are on a tag, such as tag 1, and then SwapTags
to tag 1, LeftWM will go to the previous tag instead.
This behaviour can be disabled with \f[C]disable_current_tag_swap\f[R]:
.PP
Default: \f[C]disable_current_tag_swap = false\f[R]
.PP
Example: \f[C]disable_current_tag_swap = true\f[R] (returns to old
behaviour)
.SS Focus Behaviour
.PP
LeftWM now has 3 focusing behaviours (Sloppy, ClickTo, and Driven) and
one option (focus_new_windows), which alter the way focus is handled.
These encompass 4 different patterns:
.IP "1." 3
Sloppy Focus.
Focus follows the mouse, hovering over a window brings it to focus.
.IP "2." 3
Click-to-Focus.
Focus follows the mouse, but only clicks change focus.
.IP "3." 3
Driven Focus.
Focus disregards the mouse, only keyboard actions drive the focus.
.IP "4." 3
Event Focus.
Focuses when requested by the window/new windows.
.PP
Default:
.IP
.nf
\f[C]
focus_behaviour = \[dq]Sloppy\[dq] # Can be Sloppy, ClickTo, or Driven
focus_new_windows = true
\f[R]
.fi
.SS Layouts
.PP
Leftwm supports an ever-growing amount layouts, which define the way
that windows are tiled in the workspace.
.PP
Default (all layouts, check this
enum (https://github.com/leftwm/leftwm/blob/master/leftwm-core/src/layouts/mod.rs#L21)
for the latest list):
.IP
.nf
\f[C]
layouts = [
    \[dq]MainAndDeck\[dq],
    \[dq]MainAndVertStack\[dq],
    \[dq]MainAndHorizontalStack\[dq],
    \[dq]GridHorizontal\[dq],
    \[dq]EvenHorizontal\[dq],
    \[dq]EvenVertical\[dq],
    \[dq]Fibonacci\[dq],
    \[dq]CenterMain\[dq],
    \[dq]CenterMainBalanced\[dq],
    \[dq]Monocle\[dq],
    \[dq]RightWiderLeftStack\[dq],
    \[dq]LeftWiderRightStack\[dq],
]
\f[R]
.fi
.PP
Example:
.IP
.nf
\f[C]
layouts = [
    \[dq]MainAndVertStack\[dq],
    \[dq]Monocle\[dq],
]
\f[R]
.fi
.SS Layout Mode
.PP
Leftwm now has 2 layout modes, Workspace and Tag.
These determine how layouts are remembered.
When in Workspace mode, layouts will be remembered per workspace.
When in Tag mode, layouts are remembered per tag.
.PP
Default:
.IP
.nf
\f[C]
layout_mode = \[dq]Workspace\[dq] # Can be Workspace or Tag
\f[R]
.fi
.SS Tags
.PP
Tags are the names of the virtual desktops were windows live.
In other window managers these are sometimes just called desktops.
You can rename them to any unicode string including symbols/icons from
popular icon libraries such as font-awesome.
.PP
Default:
\f[C]tags = [\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq], \[dq]4\[dq], \[dq]5\[dq], \[dq]6\[dq], \[dq]7\[dq], \[dq]8\[dq], \[dq]9\[dq]]\f[R]
.PP
Example:
\f[C]tags = [\[dq]Browser \[u2656]\[dq], \[dq]Term \[u2657]\[dq], \[dq]Shell \[u2654]\[dq], \[dq]Code \[u2655]\[dq]]\f[R]
.SS Max Window Width
.PP
You can configure a \f[C]max_window_width\f[R] to limit the width of the
tiled windows (or rather, the width of columns in a layout).
This feature comes in handy when working on ultra-wide monitors where
you don\[cq]t want a single window to take the complete workspace width.
.PP
\f[B]Demonstration\f[R]
.PP
Without \f[C]max_window_width\f[R]
.IP
.nf
\f[C]
+-----------------------------------------------+
|+---------------------------------------------+|
||                                             ||
||                     1                       ||  [49\[aq] monitor]
||                                             ||
|+---------------------------------------------+|
+-----------------------------------------------+
+-----------------------------------------------+
|+----------------------+----------------------+|
||                      |                      ||
||          1           |          2           ||  [49\[aq] monitor]
||                      |                      ||
|+----------------------+----------------------+|
+-----------------------------------------------+
\f[R]
.fi
.PP
With \f[C]max_window_width\f[R]
.IP
.nf
\f[C]
+-----------------------------------------------+
|               +---------------+               |
|               |               |               |
|               |       1       |               |  [49\[aq] monitor]
|               |               |               |
|               +---------------+               |
+-----------------------------------------------+

                \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]
                MAX_WINDOW_WIDTH
+-----------------------------------------------+
|        +--------------+--------------+        |
|        |              |              |        |
|        |       1      |       2      |        |  [49\[aq] monitor]
|        |              |              |        |
|        +--------------+--------------+        |
+-----------------------------------------------+

         \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]
              MAX_WINDOW_WIDTH * 2
\f[R]
.fi
.PP
This setting can be configured either globally, per workspace, or both.
The workspace specific configuration always takes precedence over the
global setting.
.PP
Values: An \f[C]int\f[R] value for absolute pixels (\f[C]2200\f[R] means
\f[C]2200px\f[R]), or a decimal value for fractions (\f[C]0.4\f[R] means
\f[C]40%\f[R]).
Default: Has no default value.
No value means no width limit.
.PP
Example:
.IP
.nf
\f[C]
# global configuration: 40%
max_window_width = 0.4

[[workspaces]]
y = 0
x = 0
height = 1440
width = 2560
# workspace specific configuration: 1200px
max_window_width = 1200
\f[R]
.fi
.SS Workspaces
.PP
Workspaces are how you view tags (desktops).
A workspace is a area on a screen or most likely the whole screen.
in this areas you can view a given tag.
.PP
Default: \f[C]workspaces = []\f[R] (one workspace per screen)
.PP
Example (two workspaces on a single ultrawide):
.IP
.nf
\f[C]
[[workspaces]]
y = 0
x = 0
height = 1440
width = 1720

[[workspaces]]
y = 0
x = 1720
height = 1440
width = 1720
\f[R]
.fi
.PP
Or with short syntax:
.IP
.nf
\f[C]
workspaces = [
    { y = 0, x = 0, height = 1440, width = 1720 },
    { y = 0, x = 1720, height = 1440, width = 1720 },
]
\f[R]
.fi
.SS Scratchpads
.PP
A scratchpad is a window which you can call to any tag and hide it when
not needed.
These windows can be any application which can be run from a terminal.
To call a scratchpad you will require a keybind for
ToggleScratchPad (https://github.com/leftwm/leftwm/wiki/Config#togglescratchpad).
.PP
Example:
.IP
.nf
\f[C]
# Create a scratchpad for alacritty
[[scratchpad]]
name = \[dq]Alacritty\[dq] # This is the name which is referenced when calling (case-sensitive)
value = \[dq]alacritty\[dq] # The command to load the application if it isn\[aq]t started
# x, y, width, height are in pixels when an integer is inputted or a percentage when a float is inputted.
# These values are relative to the size of the workspace, and will be restricted depending on the workspace size.
x = 860
y = 390
height = 300
width = 200
\f[R]
.fi
.PP
Or with short syntax:
.IP
.nf
\f[C]
scratchpad = [
    { name = \[dq]Alacritty\[dq], value = \[dq]alacritty\[dq], x = 860, y = 390, height = 300, width = 200 },
]
\f[R]
.fi
.SS Keybind
.PP
All other commands are keybindings.
you can think of key bindings as a way of telling LeftWM to do something
when a key combination is pressed.
There are several types of key bindings.
In order for the keybind event to fire, the keys listed in the modifier
section should be held down, and the key in the key section should then
be pressed.
Here is a list of all keys LeftWM can use as a modifier or a
key (https://github.com/leftwm/leftwm/blob/master/leftwm-core/src/utils/xkeysym_lookup.rs#L46).
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]Execute\[dq]
value = \[dq]vlc https://www.youtube.com/watch?v=oHg5SJYRHA0\[dq]
modifier = []
key = \[dq]XF86XK_AudioPlay\[dq]
\f[R]
.fi
.PP
You can use the short syntax here as well:
.IP
.nf
\f[C]
keybind = [
    { command = \[dq]Execute\[dq], value = \[dq]vlc https://www.youtube.com/watch?v=oHg5SJYRHA0\[dq], modifier = [], key = \[dq]XF86XK_AudioPlay\[dq] },
    { command = \[dq]HardReload\[dq], modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]], key = \[dq]b\[dq]},
    { command = \[dq]CloseWindow\[dq], modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]], key = \[dq]q\[dq] },
]
\f[R]
.fi
.PP
\f[B]Note: even if blank, a modifier must be present! Use
\f[CB]modifier = []\f[B] for no modifier\f[R]
.SS Keybind Commands
.SS Execute
.PP
Execute a shell command when a key combination is pressed.
.PP
Partial default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]Execute\[dq]
value = \[dq]rofi -show run\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]p\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
.SS HardReload
.PP
Completely restarts LeftWM.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]HardReload\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]b\[dq]
\f[R]
.fi
.SS SoftReload
.PP
Restarts LeftWM but remembers the state of all windows.
This is useful when playing with the config file or themes.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]SoftReload\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]r\[dq]
\f[R]
.fi
.SS CloseWindow
.PP
Closes the window that is currently focused.
This is not a forceful quit.
It is equivalent to clicking the (x) in the top right of a window
normally.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]CloseWindow\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]q\[dq]
\f[R]
.fi
.SS MoveToLastWorkspace
.PP
Takes the window that is currently focused and moves it to the workspace
that was active before the current workspace.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveToLastWorkspace\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]w\[dq]
\f[R]
.fi
.SS MoveWindowToNextWorkspace
.PP
Takes the window that is currently focused and moves it to the next
workspace.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveWindowToNextWorkspace\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]Right\[dq]
\f[R]
.fi
.SS MoveWindowToPreviousWorkspace
.PP
Takes the window that is currently focused and moves it to the previous
workspace.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveWindowToPreviousWorkspace\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]Left\[dq]
\f[R]
.fi
.SS FloatingToTile
.PP
Snaps the focused floating window into the workspace below.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FloatingToTile\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]t\[dq]
\f[R]
.fi
.SS TileToFloating
.PP
Switch the focused window to floating mode when it is tiled
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]TileToFloating\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]f\[dq]
\f[R]
.fi
.SS ToggleFloating
.PP
Switch the focused window between floating and tiled mode.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]TileToFloating\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Ctrl\[dq]]
key = \[dq]f\[dq]
\f[R]
.fi
.SS MoveWindowUp
.PP
Re-orders the focused window within the current workspace (moves up in
order).
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveWindowUp\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]Up\[dq]
\f[R]
.fi
.SS MoveWindowDown
.PP
Re-orders the focused window within the current workspace (moves down in
order).
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveWindowDown\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]Down\[dq]
\f[R]
.fi
.SS MoveWindowTop
.PP
Re-orders the focused window within the current workspace (moves to the
top of the stack).
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveWindowTop\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Return\[dq]
\f[R]
.fi
.SS MoveToTag
.PP
Moves a window to a given tag.
.PP
Partial default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]MoveToTag\[dq]
value = \[dq]1\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Shift\[dq]]
key = \[dq]1\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
.SS FocusWindowUp
.PP
Focuses the window that is one higher in order on the current workspace.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FocusWindowUp\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Up\[dq]
\f[R]
.fi
.SS FocusWindowDown
.PP
Focuses the window that is one lower in order on the current workspace.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FocusWindowDown\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Down\[dq]
\f[R]
.fi
.SS NextLayout
.PP
Changes the workspace to a new layout.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]NextLayout\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Control\[dq]]
key = \[dq]Up\[dq]
\f[R]
.fi
.SS PreviousLayout
.PP
Changes the workspace to the previous layout.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]PreviousLayout\[dq]
modifier = [\[dq]modkey\[dq], \[dq]Control\[dq]]
key = \[dq]Down\[dq]
\f[R]
.fi
.SS SetLayout
.PP
Changes the workspace to the specified layout.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]SetLayout\[dq]
value = \[dq]Monocle\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]m\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
.SS RotateTag
.PP
Rotates the tag/layout.
If the layout supports it, the tag will flip horizontally, vertically,
or both.
For example the fibonacci layout rotates in the four different
directions.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]RotateTag\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]z\[dq]
\f[R]
.fi
.SS FocusWorkspaceNext
.PP
Moves the focus from the current workspace to the next workspace (next
screen).
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FocusWorkspaceNext\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Right\[dq]
\f[R]
.fi
.SS FocusWorkspacePrevious
.PP
Moves the focus from the current workspace to the previous workspace
(previous screen).
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FocusWorkspacePrevious\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Left\[dq]
\f[R]
.fi
.SS GotoTag
.PP
Changes the tag that is being displayed in a given workspace.
.PP
Partial default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]GotoTag\[dq]
value = \[dq]9\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]9\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
.SS FocusNextTag
.PP
Moves the focus from the current tag to the next tag in a given
workspace.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FocusNextTag\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Right\[dq]
\f[R]
.fi
.SS FocusPreviousTag
.PP
Moves the focus from the current tag to the previous tag in a given
workspace.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]FocusPreviousTag\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]Left\[dq]
\f[R]
.fi
.SS SwapTags
.PP
Swaps the tags in the current workspace with the tags in the previous
workspace.
.PP
Default:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]SwapTags\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]w\[dq]
\f[R]
.fi
.SS IncreaseMainWidth
.PP
Increases the width of the currently focused window.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]IncreaseMainWidth\[dq]
value = \[dq]5\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]a\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
\f[B]Note: This command does not apply to all layouts\f[R].
.SS DecreaseMainWidth
.PP
Decreases the width of the currently focused window.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]DecreaseMainWidth\[dq]
value = \[dq]5\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]x\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
\f[B]Note: This command does not apply to all layouts\f[R].
.SS SetMarginMultiplier
.PP
Set the multiplier applied to the configured margin value.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]SetMarginMultiplier\[dq]
value = \[dq]2.5\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]m\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
\f[I]Note: The value needs to be a positive float, use \[lq]0.0\[rq] for
no margins at all, use \[lq]1.0\[rq] to reset.\f[R] \f[B]Note: This
command does not apply to all layouts\f[R].
.SS ToggleFullScreen
.PP
Toggles the currently focused window between full screen and not full
screen.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]ToggleFullScreen\[dq]
modifier = [\[dq]modkey\[dq]]
key = \[dq]f\[dq]
\f[R]
.fi
.SS ToggleScratchPad
.PP
Toggles the specified scratchpad.
.PP
Example:
.IP
.nf
\f[C]
[[keybind]]
command = \[dq]ToggleScratchPad\[dq]
value = \[dq]Alacritty\[dq] # Name set for the scratchpad
modifier = [\[dq]modkey\[dq]]
key = \[dq]p\[dq]
\f[R]
.fi
.PP
\f[B]Note: This command requires a value field to be specified\f[R].
.SS Authors
.PP
The leftwm development team
.SS Copyright
.PP
2021 - leftwm
